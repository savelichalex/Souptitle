;; Analyzed by ClojureScript 1.7.170
{:use-macros {warn-unless reagent.debug, dbg reagent.debug, $! reagent.interop, prn reagent.debug, warn reagent.debug, dev? reagent.debug, $ reagent.interop, error reagent.debug}, :excludes #{}, :name reagent.impl.component, :imports nil, :requires {util reagent.impl.util, reagent.impl.util reagent.impl.util, batch reagent.impl.batching, reagent.impl.batching reagent.impl.batching, ratom reagent.ratom, reagent.ratom reagent.ratom, reagent.interop reagent.interop, reagent.debug reagent.debug}, :uses nil, :defs {get-props {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 40, :column 7, :end-line 40, :end-column 16, :arglists (quote ([c]))}, :name reagent.impl.component/get-props, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, get-wrapper {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 202, :column 7, :end-line 202, :end-column 18, :arglists (quote ([key f name]))}, :name reagent.impl.component/get-wrapper, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 18, :method-params ([key f name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 3, :fn-var true, :arglists (quote ([key f name]))}, get-argv {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 37, :column 7, :end-line 37, :end-column 15, :arglists (quote ([c]))}, :name reagent.impl.component/get-argv, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 15, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, wrap-render {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 87, :column 7, :end-line 87, :end-column 18, :arglists (quote ([c]))}, :name reagent.impl.component/wrap-render, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 18, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, rat-opts {:name reagent.impl.component/rat-opts, :file "target/ios/reagent/impl/component.cljs", :line 131, :column 1, :end-line 131, :end-column 14, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 131, :column 6, :end-line 131, :end-column 14}}, obligatory {:name reagent.impl.component/obligatory, :file "target/ios/reagent/impl/component.cljs", :line 209, :column 1, :end-line 209, :end-column 16, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 209, :column 6, :end-line 209, :end-column 16}}, props-argv {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 32, :column 7, :end-line 32, :end-column 17, :arglists (quote ([c p]))}, :name reagent.impl.component/props-argv, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 17, :method-params ([c p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c p]))}, as-element {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 81, :column 7, :end-line 81, :end-column 17, :arglists (quote ([x]))}, :name reagent.impl.component/as-element, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, do-render {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 113, :column 7, :end-line 113, :end-column 16, :arglists (quote ([c]))}, :name reagent.impl.component/do-render, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, comp-name {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 284, :column 7, :end-line 284, :end-column 16, :arglists (quote ([]))}, :name reagent.impl.component/comp-name, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 284, :end-line 284, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, add-obligatory {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 220, :column 7, :end-line 220, :end-column 21, :arglists (quote ([fun-map]))}, :name reagent.impl.component/add-obligatory, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 21, :method-params ([fun-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 220, :end-line 220, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fun-map]))}, cached-react-class {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 65, :column 7, :end-line 65, :end-column 25, :arglists (quote ([c]))}, :name reagent.impl.component/cached-react-class, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 25, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, state-atom {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 74, :column 7, :end-line 74, :end-column 17, :arglists (quote ([this]))}, :name reagent.impl.component/state-atom, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, dash-to-camel {:name reagent.impl.component/dash-to-camel, :file "target/ios/reagent/impl/component.cljs", :line 213, :column 1, :end-line 213, :end-column 19, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 213, :column 6, :end-line 213, :end-column 19}}, reagent-component? {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 62, :column 16, :end-line 62, :end-column 34, :tag boolean, :arglists (quote ([c]))}, :name reagent.impl.component/reagent-component?, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 34, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :ret-tag boolean, :end-line 62, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([c]))}, static-fns {:name reagent.impl.component/static-fns, :file "target/ios/reagent/impl/component.cljs", :line 133, :column 1, :end-line 133, :end-column 16, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 133, :column 6, :end-line 133, :end-column 16}}, as-class {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 310, :column 7, :end-line 310, :end-column 15, :arglists (quote ([tag]))}, :name reagent.impl.component/as-class, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 15, :method-params ([tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 310, :end-line 310, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tag]))}, reagent-class? {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 54, :column 16, :end-line 54, :end-column 30, :tag boolean, :arglists (quote ([c]))}, :name reagent.impl.component/reagent-class?, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 30, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :ret-tag boolean, :end-line 54, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([c]))}, fn-to-class {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 294, :column 7, :end-line 294, :end-column 18, :arglists (quote ([f]))}, :name reagent.impl.component/fn-to-class, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 18, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 294, :end-line 294, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, reactify-component {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 315, :column 7, :end-line 315, :end-column 25, :arglists (quote ([comp]))}, :name reagent.impl.component/reactify-component, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 25, :method-params ([comp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 315, :end-line 315, :max-fixed-arity 1, :fn-var true, :arglists (quote ([comp]))}, map-to-js {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 251, :column 7, :end-line 251, :end-column 16, :arglists (quote ([m]))}, :name reagent.impl.component/map-to-js, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, extract-children {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 26, :column 7, :end-line 26, :end-column 23, :arglists (quote ([v]))}, :name reagent.impl.component/extract-children, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 23, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, component-path {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 270, :column 7, :end-line 270, :end-column 21, :arglists (quote ([c]))}, :name reagent.impl.component/component-path, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 21, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, extract-props {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 22, :column 7, :end-line 22, :end-column 20, :arglists (quote ([v]))}, :name reagent.impl.component/extract-props, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 20, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, *current-component* {:name reagent.impl.component/*current-component*, :file "target/ios/reagent/impl/component.cljs", :line 8, :column 1, :end-line 8, :end-column 39, :dynamic true, :declared true, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 8, :column 20, :end-line 8, :end-column 39, :dynamic true, :declared true}}, get-children {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 46, :column 7, :end-line 46, :end-column 19, :arglists (quote ([c]))}, :name reagent.impl.component/get-children, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 19, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, camelify-map-keys {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 215, :column 7, :end-line 215, :end-column 24, :arglists (quote ([fun-map]))}, :name reagent.impl.component/camelify-map-keys, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 24, :method-params ([fun-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 215, :end-line 215, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fun-map]))}, shallow-obj-to-map {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 13, :column 7, :end-line 13, :end-column 25, :arglists (quote ([o]))}, :name reagent.impl.component/shallow-obj-to-map, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 25, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o]))}, cljsify {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 257, :column 7, :end-line 257, :end-column 14, :arglists (quote ([body]))}, :name reagent.impl.component/cljsify, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 14, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 257, :end-line 257, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body]))}, react-class? {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 58, :column 16, :end-line 58, :end-column 28, :tag boolean, :arglists (quote ([c]))}, :name reagent.impl.component/react-class?, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 28, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :ret-tag boolean, :end-line 58, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([c]))}, cache-react-class {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 68, :column 7, :end-line 68, :end-column 24, :arglists (quote ([c constructor]))}, :name reagent.impl.component/cache-react-class, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 24, :method-params ([c constructor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c constructor]))}, custom-wrapper {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 145, :column 7, :end-line 145, :end-column 21, :arglists (quote ([key f]))}, :name reagent.impl.component/custom-wrapper, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 21, :method-params ([key f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key f]))}, create-class {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 264, :column 7, :end-line 264, :end-column 19, :arglists (quote ([body]))}, :name reagent.impl.component/create-class, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 19, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body]))}, wrap-funs {:protocol-inline nil, :meta {:file "/Users/admin/for-clojure/teach-by-friends/target/ios/reagent/impl/component.cljs", :line 223, :column 7, :end-line 223, :end-column 16, :arglists (quote ([fmap]))}, :name reagent.impl.component/wrap-funs, :variadic false, :file "target/ios/reagent/impl/component.cljs", :end-column 16, :method-params ([fmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fmap]))}}, :require-macros {ratom reagent.ratom, reagent.ratom reagent.ratom, reagent.interop reagent.interop, reagent.debug reagent.debug}, :cljs.analyzer/constants {:seen #{body render-fun :cljsLegacyRender :else pos? :displayName map? :componentWillUnmount :shouldComponentUpdate :reagentRender :no-cache :render renders :reagent-render ifn? :componentFunction :autobind == count :componentWillMount f}, :order [ifn? f :else :no-cache :render :shouldComponentUpdate :componentWillMount :componentWillUnmount :reagentRender :componentFunction pos? count renders == render-fun :displayName :autobind :cljsLegacyRender map? body :reagent-render]}, :doc nil}